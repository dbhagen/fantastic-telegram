# Taken from: https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
# and: https://docs.github.com/en/free-pro-team@latest/actions/guides/publishing-docker-images
# and adapted. More info on workflow syntax: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Application CI/CD

on:
  push:
    # Match all branches *without* a / in the name.
    # This will exclude "sub" branches, such as "feature branches",
    # named something like: "feature/my-feature". Those branches will
    # likely contain "work in progress" code, so we will run the tests
    # on the local machine and avoid using up GitHub Actions credits
    # (if applicable, such as in `private` repositories).
    # Filter syntax info: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
    branches:
      - '*'
  # pull_request:
  #   # Since pull requests come from "third parties", we will automatically
  #   # test everything coming from the outside world, for good measure.
  #   # The `branches` tag could also be omitted, yielding the same effect here.
  #   branches:
  #     - '**'
  release:
    types: [published, edited]

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  test:
    name: Run Node Jest tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Test Cache
        if: ${{ github.event.act }}
        run: |
          response=$(curl -s -X GET -H 'Authorization: Bearer foo' http://localhost:8080)
          echo "response from curl= $response"

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit packages
        run: pnpm audit || true

      - name: Run tests
        run: pnpm test

  cleanLocalDocker:
    if: ${{ github.event.act }}
    name: Clean Local Docker Builds
    runs-on: ubuntu-latest
    steps:
      - name: Remove old images by name
        run: docker rmi -f $(docker images 'dbhagen/fantastic-telegram' -a -q) || true

  setBuildEnvs:
    name: Set Build Environment Variables
    runs-on: ubuntu-latest
    env:
      TEST_TAG: ci
      LATEST_TAG: latest
      IMAGE_TAG: dbhagen/fantastic-telegram
      TAG_NAME:
      GITHUB_SHA_SHORT:
      BRANCH:
    outputs:
      BUILD_DATE: ${{ steps.GetBUILD_DATE.outputs.BUILD_DATE }}
      BRANCH: ${{ steps.GetBRANCH.outputs.BRANCH }}
      GITHUB_SHA_SHORT: ${{ steps.GetGITHUB_SHA_SHORT.outputs.GITHUB_SHA_SHORT }}
      TAG_NAME: ${{ steps.GetTAG_NAME.outputs.TAG_NAME }}
      RELEASE_NAME: ${{ steps.GetRELEASE_NAME.outputs.RELEASE_NAME }}
      TEST_TAG: ci
      LATEST_TAG: latest
      IMAGE_TAG: dbhagen/fantastic-telegram
    steps:
      - name: Get BUILD_DATE
        id: GetBUILD_DATE
        run: |
          echo "BUILD_DATE=$(date -u +'%Y%m%dT%H%MZ')" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y%m%dT%H%MZ')" >> $GITHUB_ENV
      - name: Extract Branch Name
        id: GetBRANCH
        run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_OUTPUT
      - name: Set GITHUB_SHA_SHORT
        id: GetGITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
      - name: Set TAG_NAME
        id: GetTAG_NAME
        run: echo "TAG_NAME=$BUILD_DATE-build" >> $GITHUB_OUTPUT
      - name: Set RELEASE_NAME
        id: GetRELEASE_NAME
        run: echo "RELEASE_NAME=$BUILD_DATE-release" >> $GITHUB_OUTPUT

  # Run code tests before building the image, to ensure it is good to go
  build:
    needs: [test, setBuildEnvs]
    name: Docker Build, Test, and Publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform-group: [linux/amd64] # , linux/arm64]
    outputs:
      ARCH_TAG: ${{ steps.GetARCH_TAG.outputs.ARCH_TAG }}
    env:
      TEST_TAG: ${{ needs.setBuildEnvs.outputs.TEST_TAG }}
      LATEST_TAG: ${{ needs.setBuildEnvs.outputs.LATEST_TAG }}
      IMAGE_TAG: ${{ needs.setBuildEnvs.outputs.IMAGE_TAG }}
      TAG_NAME: ${{ needs.setBuildEnvs.outputs.TAG_NAME }}
      GITHUB_SHA_SHORT: ${{ needs.setBuildEnvs.outputs.GITHUB_SHA_SHORT }}
      BRANCH: ${{ needs.setBuildEnvs.outputs.BRANCH }}
      RELEASE_NAME: ${{ needs.setBuildEnvs.outputs.RELEASE_NAME }}

    steps:
      - name: Set ARCH_INPUT
        run: echo "ARCH_INPUT=${{ matrix.platform-group }}" >> $GITHUB_ENV
      - name: Set ARCH_TAG
        run: echo "ARCH_TAG=${ARCH_INPUT%%/*}-${ARCH_INPUT#*/}" >> $GITHUB_ENV
      - name: Set Default Docker Platform
        run: echo "DOCKER_DEFAULT_PLATFORM=${{ matrix.platform-group }}" >> $GITHUB_ENV
      - name: Test with environment variables
        run: echo $ARCH_TAG - $TEST_TAG - $LATEST_TAG - $IMAGE_TAG - $TAG_NAME - $RELEASE_NAME - $GITHUB_SHA_SHORT - $GITHUB_SHA
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.TEST_TAG }}-${{ env.ARCH_TAG }}
            ${{ env.IMAGE_TAG }}:${{ env.ARCH_TAG }}-${{ env.GITHUB_SHA_SHORT }}
            ${{ env.IMAGE_TAG }}:${{ env.ARCH_TAG }}-${{ env.TAG_NAME }}
            ${{ env.IMAGE_TAG }}:${{ env.ARCH_TAG }}-${{ env.BRANCH}}-${{ env.TAG_NAME }}
            ${{ env.IMAGE_TAG }}:${{ env.ARCH_TAG }}-ci-${{ env.BRANCH}}
            ${{ env.IMAGE_TAG }}:${{ env.ARCH_TAG }}-ci-${{ env.BRANCH}}-${{ env.TAG_NAME }}
          platforms: ${{ matrix.platform-group }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run tests against image
        uses: addnab/docker-run-action@v3
        with:
          options: --rm --name fantastic-telegram-testenv-${{ env.ARCH_TAG }}
          image: ${{ env.IMAGE_TAG }}:${{ env.TEST_TAG }}-${{ env.ARCH_TAG }}
          run: npm test

      - name: Push image to Docker Hub
        uses: docker/build-push-action@v4
        if: ${{ !github.event.act }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.TEST_TAG }}-${{ env.ARCH_TAG }}
            ${{ env.IMAGE_TAG }}:${{ env.GITHUB_SHA_SHORT }}
            ${{ env.IMAGE_TAG }}:${{ env.TAG_NAME }}
            ${{ env.IMAGE_TAG }}:${{ env.BRANCH}}-${{ env.TAG_NAME }}
            ${{ env.IMAGE_TAG }}:ci-${{ env.BRANCH}}
            ${{ env.IMAGE_TAG }}:ci-${{ env.BRANCH}}-${{ env.TAG_NAME }}
          platforms: ${{ matrix.platform-group }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Push lastest tag on image if master
        uses: docker/build-push-action@v4
        if: |
          !github.event.act && github.ref == 'refs/heads/main'
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}:${{ env.LATEST_TAG }}
          platforms: ${{ matrix.platform-group }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
